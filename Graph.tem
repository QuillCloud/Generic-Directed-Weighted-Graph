// copy constructor
template <typename N, typename E>
Graph<N, E>::Graph(const Graph& g) {
    // add copy target nodes in new graph
    std::for_each(g.node_list.begin(), g.node_list.end(), [this] (const auto& i) {
        addNode(i.get_node_name());
    });
    // add copy target edges in new graph
    std::for_each(g.node_list.begin(), g.node_list.end(), [this] (const auto& i) {
        auto i_edge_list = i.get_edge_list();
        std::for_each(i_edge_list.begin(), i_edge_list.end(), [this, &i] (const auto& j) {
            addEdge(i.get_node_name(), std::get<1>(j), std::get<0>(j));
        });
    });
}

// move constructor
template <typename N, typename E>
Graph<N, E>::Graph(Graph&& g) {
    node_list = std::move(g.node_list);
    g.node_list.clear();
}

// copy assignment
template <typename N, typename E>
Graph<N, E>& Graph<N, E>::operator=(const Graph& g) {
    if (this != &g) {
        // clear the graph and add copy target nodes in graph
        node_list.clear();
        // add copy target nodes in this graph
        std::for_each(g.node_list.begin(), g.node_list.end(), [this] (const auto& i) {
            addNode(i.get_node_name());
        });
        // add copy target edges in this graph
        std::for_each(g.node_list.begin(), g.node_list.end(), [this] (const auto& i) {
            auto i_edge_list = i.get_edge_list();
            std::for_each(i_edge_list.begin(), i_edge_list.end(), [this, &i] (const auto& j) {
                addEdge(i.get_node_name(), std::get<1>(j), std::get<0>(j));
            });
        });
    }
    return *this;
}

// move assignment
template <typename N, typename E>
Graph<N, E>& Graph<N, E>::operator=(Graph&& g) {
    if (this != &g) {
        node_list = std::move(g.node_list);
        g.node_list.clear();
    }
    return *this;
}

// add a new node with value val to the graph
template <typename N, typename E>
bool Graph<N, E>::addNode(const N& val) {
    // check if node already in graph
    for (const auto& i : node_list) {
        if (i.get_node_name() == val) {
            return false;
        }
    }
    // create a new node with value and add it to graph
    Node newNode(val);
    node_list.push_back(newNode);
    return true;
}